<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Fase 2: Implementaci√≥n Club Canino</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .status-loading { @apply bg-blue-50 text-blue-700 border-blue-200; }
        .status-success { @apply bg-green-50 text-green-700 border-green-200; }
        .status-error { @apply bg-red-50 text-red-700 border-red-200; }
        .status-warning { @apply bg-yellow-50 text-yellow-700 border-yellow-200; }
        .sql-script { @apply bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm overflow-x-auto; }
        .step-completed { @apply bg-green-100 border-green-300 text-green-800; }
        .step-current { @apply bg-blue-100 border-blue-300 text-blue-800; }
        .step-pending { @apply bg-gray-100 border-gray-300 text-gray-600; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-4">
                üöÄ FASE 2: IMPLEMENTACI√ìN COMPLETA
            </h1>
            <p class="text-gray-600 mb-4">
                Creando esquema optimizado para Club Canino Dos Huellitas con tabla <code class="bg-blue-100 px-2 py-1 rounded">profiles</code> como est√°ndar
            </p>
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-green-700">
                            <strong>Ventaja:</strong> Implementamos el esquema correcto desde cero. Sin inconsistencias, sin migraciones complejas.
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Steps -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">üìã Progreso de Implementaci√≥n</h2>
            <div class="space-y-3" id="progress-steps">
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">1</span>
                    <span>Crear esquema de tabla profiles</span>
                </div>
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">2</span>
                    <span>Crear tabla dogs (perros del club)</span>
                </div>
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">3</span>
                    <span>Crear tabla evaluations (sistema completo)</span>
                </div>
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">4</span>
                    <span>Configurar Row Level Security (RLS)</span>
                </div>
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">5</span>
                    <span>Crear triggers autom√°ticos</span>
                </div>
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">6</span>
                    <span>Insertar datos de prueba</span>
                </div>
                <div class="step-pending border rounded-lg p-3 flex items-center">
                    <span class="w-6 h-6 rounded-full bg-gray-300 text-white text-sm flex items-center justify-center mr-3">7</span>
                    <span>Verificar funcionamiento completo</span>
                </div>
            </div>
        </div>

        <!-- SQL Script Preview -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-semibold mb-6">üìú SCRIPT SQL COMPLETO</h2>
            <p class="text-gray-600 mb-4">Este script crear√° todo el esquema necesario para Club Canino:</p>
            
            <div class="sql-script mb-4" id="sql-preview">
-- ============================================
-- ESQUEMA COMPLETO CLUB CANINO DOS HUELLITAS
-- ============================================

-- 1Ô∏è‚É£ TABLA PROFILES (Usuario principal)
CREATE TABLE IF NOT EXISTS profiles (
  id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  role TEXT CHECK (role IN ('padre', 'profesor', 'admin')) DEFAULT 'padre',
  full_name TEXT,
  phone TEXT,
  avatar_url TEXT,
  club_member_since TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2Ô∏è‚É£ TABLA DOGS (Perros del club)
CREATE TABLE IF NOT EXISTS dogs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  owner_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  breed TEXT,
  size TEXT CHECK (size IN ('peque√±o', 'mediano', 'grande', 'gigante')),
  age INTEGER,
  weight DECIMAL(5,2),
  color TEXT,
  active BOOLEAN DEFAULT true,
  notes TEXT,
  photo_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3Ô∏è‚É£ TABLA EVALUATIONS (Sistema completo de evaluaciones)
CREATE TABLE IF NOT EXISTS evaluations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  dog_id UUID REFERENCES dogs(id) ON DELETE CASCADE,
  evaluator_id UUID REFERENCES profiles(id),
  date DATE NOT NULL DEFAULT CURRENT_DATE,
  location TEXT CHECK (location IN ('casa', 'colegio')) NOT NULL,
  
  -- M√©tricas principales (1-10)
  energy_level INTEGER CHECK (energy_level BETWEEN 1 AND 10),
  sociability_level INTEGER CHECK (sociability_level BETWEEN 1 AND 10),
  obedience_level INTEGER CHECK (obedience_level BETWEEN 1 AND 10),
  anxiety_level INTEGER CHECK (anxiety_level BETWEEN 1 AND 10),
  
  -- Comportamientos espec√≠ficos
  barks_much TEXT CHECK (barks_much IN ('poco', 'normal', 'mucho')),
  begs_food TEXT CHECK (begs_food IN ('nunca', 'a_veces', 'siempre')),
  destructive TEXT CHECK (destructive IN ('nunca', 'a_veces', 'frecuente')),
  social_with_dogs TEXT CHECK (social_with_dogs IN ('poco', 'normal', 'mucho')),
  follows_everywhere TEXT CHECK (follows_everywhere IN ('no', 'a_veces', 'siempre')),
  window_watching TEXT CHECK (window_watching IN ('poco', 'normal', 'mucho')),
  
  -- Actividades espec√≠ficas
  ate_well TEXT CHECK (ate_well IN ('excelente', 'normal', 'poco')),
  bathroom_accidents TEXT CHECK (bathroom_accidents IN ('no', 'uno', 'varios')),
  played_with_toys TEXT CHECK (played_with_toys IN ('mucho', 'si', 'poco')),
  responded_to_commands TEXT CHECK (responded_to_commands IN ('excelente', 'bien', 'regular')),
  
  -- Notas detalladas
  highlights TEXT,
  concerns TEXT,
  notes TEXT,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4Ô∏è‚É£ √çNDICES PARA PERFORMANCE
CREATE INDEX IF NOT EXISTS idx_dogs_owner_id ON dogs(owner_id);
CREATE INDEX IF NOT EXISTS idx_dogs_active ON dogs(active);
CREATE INDEX IF NOT EXISTS idx_evaluations_dog_id ON evaluations(dog_id);
CREATE INDEX IF NOT EXISTS idx_evaluations_date ON evaluations(date);
CREATE INDEX IF NOT EXISTS idx_evaluations_location ON evaluations(location);
CREATE INDEX IF NOT EXISTS idx_profiles_role ON profiles(role);

-- 5Ô∏è‚É£ ROW LEVEL SECURITY
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE dogs ENABLE ROW LEVEL SECURITY;
ALTER TABLE evaluations ENABLE ROW LEVEL SECURITY;

-- 6Ô∏è‚É£ POL√çTICAS DE SEGURIDAD
-- Profiles: usuarios ven su propio perfil + roles superiores
CREATE POLICY "profiles_select_policy" ON profiles FOR SELECT USING (
  auth.uid() = id OR 
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'profesor')
  )
);

-- Dogs: padres ven sus perros, profesores/admins ven todos
CREATE POLICY "dogs_select_policy" ON dogs FOR SELECT USING (
  owner_id = auth.uid() OR
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'profesor')
  )
);

-- Evaluations: ver evaluaciones seg√∫n rol y propiedad
CREATE POLICY "evaluations_select_policy" ON evaluations FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM dogs d WHERE d.id = dog_id AND d.owner_id = auth.uid()
  ) OR
  evaluator_id = auth.uid() OR
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'profesor')
  )
);

-- 7Ô∏è‚É£ TRIGGER PARA AUTO-CREAR PROFILES
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name)
  VALUES (
    new.id,
    new.email,
    COALESCE(new.raw_user_meta_data->>'full_name', new.email)
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 8Ô∏è‚É£ DATOS DE PRUEBA
INSERT INTO profiles (id, email, role, full_name, phone) VALUES 
('11111111-1111-1111-1111-111111111111', 'maria@gmail.com', 'padre', 'Mar√≠a Garc√≠a', '3007654321'),
('22222222-2222-2222-2222-222222222222', 'profesor@clubcanino.com', 'profesor', 'Carlos Profesor', '3001234567'),
('33333333-3333-3333-3333-333333333333', 'admin@clubcanino.com', 'admin', 'Juan Pablo Leal', '3144329824')
ON CONFLICT (id) DO NOTHING;

INSERT INTO dogs (id, name, owner_id, breed, size, age, notes) VALUES 
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'Max', '11111111-1111-1111-1111-111111111111', 'Golden Retriever', 'grande', 3, 'Perro muy sociable y energ√©tico'),
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'Luna', '11111111-1111-1111-1111-111111111111', 'Beagle', 'mediano', 2, 'Perra curiosa e inteligente'),
('cccccccc-cccc-cccc-cccc-cccccccccccc', 'Rocky', '11111111-1111-1111-1111-111111111111', 'Pastor Alem√°n', 'grande', 4, 'Perro protector y leal')
ON CONFLICT (id) DO NOTHING;

-- ‚úÖ ESQUEMA COMPLETO CREADO
SELECT 'Esquema Club Canino creado exitosamente' as result;
            </div>

            <div class="flex gap-4">
                <button 
                    id="copy-sql" 
                    class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 font-medium"
                >
                    üìã Copiar SQL
                </button>
                <button 
                    id="download-sql" 
                    class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 font-medium"
                >
                    üíæ Descargar Script
                </button>
            </div>
        </div>

        <!-- Execution Controls -->
        <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-semibold mb-6">üéØ EJECUTAR IMPLEMENTACI√ìN</h2>
            
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <h3 class="font-semibold text-blue-800 mb-2">üìã Instrucciones de Ejecuci√≥n:</h3>
                <ol class="text-blue-700 space-y-2">
                    <li><strong>1.</strong> Copia el script SQL completo</li>
                    <li><strong>2.</strong> Ve a tu dashboard de Supabase ‚Üí SQL Editor</li>
                    <li><strong>3.</strong> Pega el script y ejecuta</li>
                    <li><strong>4.</strong> Vuelve aqu√≠ y haz clic en "Verificar Implementaci√≥n"</li>
                </ol>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div class="p-4 border rounded-lg">
                    <h4 class="font-semibold mb-2">üéØ Lo que se crear√°:</h4>
                    <ul class="text-sm space-y-1">
                        <li>‚úÖ Tabla <code>profiles</code> (usuarios)</li>
                        <li>‚úÖ Tabla <code>dogs</code> (perros)</li>
                        <li>‚úÖ Tabla <code>evaluations</code> (evaluaciones)</li>
                        <li>‚úÖ RLS y pol√≠ticas de seguridad</li>
                        <li>‚úÖ Triggers autom√°ticos</li>
                        <li>‚úÖ Datos de prueba</li>
                    </ul>
                </div>
                <div class="p-4 border rounded-lg">
                    <h4 class="font-semibold mb-2">üîê Seguridad incluida:</h4>
                    <ul class="text-sm space-y-1">
                        <li>‚úÖ Padres: Solo sus perros</li>
                        <li>‚úÖ Profesores: Todos los perros</li>
                        <li>‚úÖ Admins: Control total</li>
                        <li>‚úÖ Auto-creaci√≥n de perfiles</li>
                        <li>‚úÖ Validaciones de datos</li>
                    </ul>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button 
                    id="test-connection" 
                    class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 font-medium"
                >
                    üîó Probar Conexi√≥n
                </button>
                <button 
                    id="verify-implementation" 
                    class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 font-medium"
                    disabled
                >
                    ‚úÖ Verificar Implementaci√≥n
                </button>
                <button 
                    id="proceed-phase3" 
                    class="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 font-medium"
                    disabled
                >
                    ‚û°Ô∏è Ir a Fase 3
                </button>
            </div>
        </div>

        <!-- Status Panel -->
        <div class="bg-white rounded-lg shadow p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">üìä Estado de la Implementaci√≥n</h2>
            <div id="implementation-status" class="space-y-3">
                <div class="border rounded-lg p-3 status-loading">
                    üîÑ Listo para ejecutar implementaci√≥n...
                </div>
            </div>
        </div>

        <!-- Verification Results -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-2xl font-semibold mb-6">üß™ RESULTADOS DE VERIFICACI√ìN</h2>
            <div id="verification-results" class="space-y-4">
                <div class="text-gray-500">Ejecuta la verificaci√≥n para ver resultados...</div>
            </div>
        </div>
    </div>

    <script>
        // Tipos TypeScript para el navegador
        interface SupabaseClient {
            from: (table: string) => {
                select: (columns: string) => {
                    eq?: (column: string, value: any) => any;
                    limit?: (count: number) => Promise<{data: any, error: any}>;
                } & Promise<{data: any, error: any}>;
            };
        }

        interface VerificationResult {
            table: string;
            status: 'success' | 'error' | 'warning';
            message: string;
            count?: number;
        }

        interface ElementsMap {
            progressSteps: HTMLElement | null;
            sqlPreview: HTMLElement | null;
            copySql: HTMLButtonElement | null;
            downloadSql: HTMLButtonElement | null;
            testConnection: HTMLButtonElement | null;
            verifyImplementation: HTMLButtonElement | null;
            proceedPhase3: HTMLButtonElement | null;
            implementationStatus: HTMLElement | null;
            verificationResults: HTMLElement | null;
        }

        // Variables globales tipadas
        let supabase: SupabaseClient | null = null;
        let implementationResults: Record<string, any> = {};

        // Elementos DOM tipados
        const elements: ElementsMap = {
            progressSteps: document.getElementById('progress-steps'),
            sqlPreview: document.getElementById('sql-preview'),
            copySql: document.getElementById('copy-sql') as HTMLButtonElement,
            downloadSql: document.getElementById('download-sql') as HTMLButtonElement,
            testConnection: document.getElementById('test-connection') as HTMLButtonElement,
            verifyImplementation: document.getElementById('verify-implementation') as HTMLButtonElement,
            proceedPhase3: document.getElementById('proceed-phase3') as HTMLButtonElement,
            implementationStatus: document.getElementById('implementation-status'),
            verificationResults: document.getElementById('verification-results')
        };

        // Configuraci√≥n Supabase
        const SUPABASE_CONFIG = {
            url: 'https://tu-proyecto.supabase.co', // CAMBIA ESTO
            key: 'tu-anon-key-aqui' // CAMBIA ESTO
        };

        // SQL Script completo
        const SQL_SCRIPT = `-- ============================================
-- ESQUEMA COMPLETO CLUB CANINO DOS HUELLITAS
-- Implementaci√≥n Fase 2 - Profiles como est√°ndar
-- ============================================

-- 1Ô∏è‚É£ TABLA PROFILES (Usuario principal)
CREATE TABLE IF NOT EXISTS profiles (
  id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  role TEXT CHECK (role IN ('padre', 'profesor', 'admin')) DEFAULT 'padre',
  full_name TEXT,
  phone TEXT,
  avatar_url TEXT,
  club_member_since TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2Ô∏è‚É£ TABLA DOGS (Perros del club)
CREATE TABLE IF NOT EXISTS dogs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  owner_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  breed TEXT,
  size TEXT CHECK (size IN ('peque√±o', 'mediano', 'grande', 'gigante')),
  age INTEGER,
  weight DECIMAL(5,2),
  color TEXT,
  active BOOLEAN DEFAULT true,
  notes TEXT,
  photo_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3Ô∏è‚É£ TABLA EVALUATIONS (Sistema completo de evaluaciones)
CREATE TABLE IF NOT EXISTS evaluations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  dog_id UUID REFERENCES dogs(id) ON DELETE CASCADE,
  evaluator_id UUID REFERENCES profiles(id),
  date DATE NOT NULL DEFAULT CURRENT_DATE,
  location TEXT CHECK (location IN ('casa', 'colegio')) NOT NULL,
  
  -- M√©tricas principales (1-10)
  energy_level INTEGER CHECK (energy_level BETWEEN 1 AND 10),
  sociability_level INTEGER CHECK (sociability_level BETWEEN 1 AND 10),
  obedience_level INTEGER CHECK (obedience_level BETWEEN 1 AND 10),
  anxiety_level INTEGER CHECK (anxiety_level BETWEEN 1 AND 10),
  
  -- Comportamientos espec√≠ficos
  barks_much TEXT CHECK (barks_much IN ('poco', 'normal', 'mucho')),
  begs_food TEXT CHECK (begs_food IN ('nunca', 'a_veces', 'siempre')),
  destructive TEXT CHECK (destructive IN ('nunca', 'a_veces', 'frecuente')),
  social_with_dogs TEXT CHECK (social_with_dogs IN ('poco', 'normal', 'mucho')),
  follows_everywhere TEXT CHECK (follows_everywhere IN ('no', 'a_veces', 'siempre')),
  window_watching TEXT CHECK (window_watching IN ('poco', 'normal', 'mucho')),
  
  -- Actividades espec√≠ficas
  ate_well TEXT CHECK (ate_well IN ('excelente', 'normal', 'poco')),
  bathroom_accidents TEXT CHECK (bathroom_accidents IN ('no', 'uno', 'varios')),
  played_with_toys TEXT CHECK (played_with_toys IN ('mucho', 'si', 'poco')),
  responded_to_commands TEXT CHECK (responded_to_commands IN ('excelente', 'bien', 'regular')),
  
  -- Notas detalladas
  highlights TEXT,
  concerns TEXT,
  notes TEXT,
  
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4Ô∏è‚É£ √çNDICES PARA PERFORMANCE
CREATE INDEX IF NOT EXISTS idx_dogs_owner_id ON dogs(owner_id);
CREATE INDEX IF NOT EXISTS idx_dogs_active ON dogs(active);
CREATE INDEX IF NOT EXISTS idx_evaluations_dog_id ON evaluations(dog_id);
CREATE INDEX IF NOT EXISTS idx_evaluations_date ON evaluations(date);
CREATE INDEX IF NOT EXISTS idx_evaluations_location ON evaluations(location);
CREATE INDEX IF NOT EXISTS idx_profiles_role ON profiles(role);

-- 5Ô∏è‚É£ ROW LEVEL SECURITY
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE dogs ENABLE ROW LEVEL SECURITY;
ALTER TABLE evaluations ENABLE ROW LEVEL SECURITY;

-- 6Ô∏è‚É£ POL√çTICAS DE SEGURIDAD
-- Profiles: usuarios ven su propio perfil + roles superiores
CREATE POLICY "profiles_select_policy" ON profiles FOR SELECT USING (
  auth.uid() = id OR 
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'profesor')
  )
);

CREATE POLICY "profiles_update_policy" ON profiles FOR UPDATE USING (auth.uid() = id);

-- Dogs: padres ven sus perros, profesores/admins ven todos
CREATE POLICY "dogs_select_policy" ON dogs FOR SELECT USING (
  owner_id = auth.uid() OR
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'profesor')
  )
);

CREATE POLICY "dogs_insert_policy" ON dogs FOR INSERT WITH CHECK (
  owner_id = auth.uid() OR
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin')
  )
);

-- Evaluations: ver evaluaciones seg√∫n rol y propiedad
CREATE POLICY "evaluations_select_policy" ON evaluations FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM dogs d WHERE d.id = dog_id AND d.owner_id = auth.uid()
  ) OR
  evaluator_id = auth.uid() OR
  EXISTS (
    SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('admin', 'profesor')
  )
);

CREATE POLICY "evaluations_insert_policy" ON evaluations FOR INSERT WITH CHECK (
  evaluator_id = auth.uid()
);

-- 7Ô∏è‚É£ TRIGGER PARA AUTO-CREAR PROFILES
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $
BEGIN
  INSERT INTO public.profiles (id, email, full_name)
  VALUES (
    new.id,
    new.email,
    COALESCE(new.raw_user_meta_data->>'full_name', new.email)
  );
  RETURN new;
END;
$ LANGUAGE plpgsql SECURITY DEFINER;

-- Eliminar trigger existente si existe
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 8Ô∏è‚É£ DATOS DE PRUEBA
INSERT INTO profiles (id, email, role, full_name, phone) VALUES 
('11111111-1111-1111-1111-111111111111', 'maria@gmail.com', 'padre', 'Mar√≠a Garc√≠a', '3007654321'),
('22222222-2222-2222-2222-222222222222', 'profesor@clubcanino.com', 'profesor', 'Carlos Profesor', '3001234567'),
('33333333-3333-3333-3333-333333333333', 'admin@clubcanino.com', 'admin', 'Juan Pablo Leal', '3144329824')
ON CONFLICT (id) DO NOTHING;

INSERT INTO dogs (id, name, owner_id, breed, size, age, notes) VALUES 
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'Max', '11111111-1111-1111-1111-111111111111', 'Golden Retriever', 'grande', 3, 'Perro muy sociable y energ√©tico'),
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'Luna', '11111111-1111-1111-1111-111111111111', 'Beagle', 'mediano', 2, 'Perra curiosa e inteligente'),
('cccccccc-cccc-cccc-cccc-cccccccccccc', 'Rocky', '11111111-1111-1111-1111-111111111111', 'Pastor Alem√°n', 'grande', 4, 'Perro protector y leal')
ON CONFLICT (id) DO NOTHING;

INSERT INTO evaluations (
  dog_id, evaluator_id, location, date,
  energy_level, sociability_level, obedience_level, anxiety_level,
  barks_much, begs_food, destructive, social_with_dogs,
  ate_well, played_with_toys, responded_to_commands,
  highlights, concerns, notes
) VALUES (
  'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 
  '22222222-2222-2222-2222-222222222222',
  'colegio', CURRENT_DATE,
  8, 9, 7, 4,
  'poco', 'a_veces', 'nunca', 'mucho',
  'excelente', 'mucho', 'bien',
  'Max tuvo un d√≠a excelente jugando con otros perros.',
  'Ninguna preocupaci√≥n significativa.',
  'Max demostr√≥ excelente adaptaci√≥n y particip√≥ activamente.'
) ON CONFLICT DO NOTHING;

-- ‚úÖ ESQUEMA COMPLETO CREADO
SELECT 'Esquema Club Canino creado exitosamente' as result;`;

        // Utilidades tipadas
        function updateStatus(message: string, type: string = 'loading'): void {
            if (elements.implementationStatus) {
                elements.implementationStatus.innerHTML = `
                    <div class="border rounded-lg p-3 status-${type}">
                        ${message}
                    </div>
                `;
            }
        }

        function updateStep(stepNumber: number, status: string): void {
            const steps = elements.progressSteps?.querySelectorAll('.step-pending, .step-current, .step-completed');
            if (steps && steps[stepNumber - 1]) {
                const step = steps[stepNumber - 1] as HTMLElement;
                step.className = step.className.replace(/step-\w+/, `step-${status}`);
                
                const circle = step.querySelector('.w-6') as HTMLElement;
                if (circle) {
                    if (status === 'completed') {
                        circle.className = circle.className.replace('bg-gray-300', 'bg-green-500');
                        circle.innerHTML = '‚úì';
                    } else if (status === 'current') {
                        circle.className = circle.className.replace('bg-gray-300', 'bg-blue-500');
                    }
                }
            }
        }

        // Funciones principales
        async function initializeSupabase(): Promise<boolean> {
            try {
                if (typeof (window as any).supabase === 'undefined') {
                    const script = document.createElement('script');
                    script.src = 'https://unpkg.com/@supabase/supabase-js@2';
                    document.head.appendChild(script);
                    
                    await new Promise<void>(resolve => {
                        script.onload = () => resolve();
                    });
                }

                supabase = (window as any).supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.key) as SupabaseClient;
                return true;
            } catch (error) {
                console.error('Error inicializando Supabase:', error);
                return false;
            }
        }

        async function testConnection(): Promise<void> {
            try {
                updateStatus('üîÑ Probando conexi√≥n a Supabase...', 'loading');
                const testBtn = elements.testConnection;
                if (testBtn) {
                    testBtn.disabled = true;
                    testBtn.textContent = 'üîÑ Probando...';
                }

                const initialized = await initializeSupabase();
                if (!initialized) {
                    throw new Error('No se pudo inicializar Supabase');
                }

                // Probar conexi√≥n b√°sica
                if (!supabase) throw new Error('Supabase no inicializado');
                const { data, error } = await supabase.from('profiles').select('count(*)').limit(1);
                
                if (error && error.message.includes('relation "profiles" does not exist')) {
                    updateStatus('‚úÖ Conexi√≥n exitosa. Base de datos lista para implementaci√≥n.', 'success');
                    const verifyBtn = elements.verifyImplementation;
                    if (verifyBtn) verifyBtn.disabled = false;
                } else if (error) {
                    throw error;
                } else {
                    updateStatus('‚úÖ Conexi√≥n exitosa. Esquema ya existe.', 'success');
                    const verifyBtn = elements.verifyImplementation;
                    if (verifyBtn) verifyBtn.disabled = false;
                }

            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                updateStatus(`‚ùå Error de conexi√≥n: ${errorMessage}`, 'error');
            } finally {
                const testBtn = elements.testConnection;
                if (testBtn) {
                    testBtn.disabled = false;
                    testBtn.textContent = 'üîó Probar Conexi√≥n';
                }
            }
        }

        async function verifyImplementation(): Promise<void> {
            try {
                updateStatus('üîÑ Verificando implementaci√≥n...', 'loading');
                const verifyBtn = elements.verifyImplementation;
                if (verifyBtn) {
                    verifyBtn.disabled = true;
                    verifyBtn.textContent = 'üîÑ Verificando...';
                }

                if (!supabase) {
                    await initializeSupabase();
                }

                const tables = ['profiles', 'dogs', 'evaluations'];
                const results: VerificationResult[] = [];
                let currentStep = 1;

                for (const table of tables) {
                    updateStep(currentStep, 'current');
                    
                    try {
                        if (!supabase) throw new Error('Supabase no inicializado');
                        const { data, error } = await supabase.from(table).select('*').limit(1);
                        
                        if (!error) {
                            results.push({
                                table,
                                status: 'success',
                                message: `‚úÖ Tabla ${table} existe y funciona`,
                                count: data?.length || 0
                            });
                            updateStep(currentStep, 'completed');
                        } else {
                            results.push({
                                table,
                                status: 'error',
                                message: `‚ùå Error en ${table}: ${error.message}`
                            });
                        }
                    } catch (err) {
                        const errorMessage = err instanceof Error ? err.message : String(err);
                        results.push({
                            table,
                            status: 'error',
                            message: `‚ùå Error en ${table}: ${errorMessage}`
                        });
                    }
                    
                    currentStep++;
                    await new Promise(resolve => setTimeout(resolve, 500));
                }

                // Verificar datos de prueba
                updateStep(currentStep, 'current');
                try {
                    if (!supabase) throw new Error('Supabase no inicializado');
                    const { data: profiles } = await supabase.from('profiles').select('email, role');
                    const { data: dogs } = await supabase.from('dogs').select('name');
                    const { data: evaluations } = await supabase.from('evaluations').select('id');

                    results.push({
                        table: 'test_data',
                        status: 'success',
                        message: `‚úÖ Datos de prueba: ${profiles?.length || 0} usuarios, ${dogs?.length || 0} perros, ${evaluations?.length || 0} evaluaciones`
                    });
                    updateStep(currentStep, 'completed');
                } catch (err) {
                    results.push({
                        table: 'test_data',
                        status: 'warning',
                        message: `‚ö†Ô∏è Datos de prueba incompletos`
                    });
                }

                // Mostrar resultados
                displayVerificationResults(results);
                
                const hasErrors = results.some(r => r.status === 'error');
                if (!hasErrors) {
                    updateStatus('‚úÖ Implementaci√≥n completada exitosamente', 'success');
                    const proceedBtn = elements.proceedPhase3;
                    if (proceedBtn) proceedBtn.disabled = false;
                    
                    // Completar todos los pasos restantes
                    for (let i = currentStep + 1; i <= 7; i++) {
                        updateStep(i, 'completed');
                    }
                } else {
                    updateStatus('‚ö†Ô∏è Implementaci√≥n incompleta. Revisa el script SQL.', 'warning');
                }

            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                updateStatus(`‚ùå Error en verificaci√≥n: ${errorMessage}`, 'error');
            } finally {
                const verifyBtn = elements.verifyImplementation;
                if (verifyBtn) {
                    verifyBtn.disabled = false;
                    verifyBtn.textContent = '‚úÖ Verificar Implementaci√≥n';
                }
            }
        }

        function displayVerificationResults(results: VerificationResult[]): void {
            if (!elements.verificationResults) return;

            let html = '';
            results.forEach((result: VerificationResult) => {
                const colorClass: Record<string, string> = {
                    success: 'border-green-300 bg-green-50 text-green-800',
                    error: 'border-red-300 bg-red-50 text-red-800',
                    warning: 'border-yellow-300 bg-yellow-50 text-yellow-800'
                };

                const cssClass = colorClass[result.status] || colorClass.error;

                html += `
                    <div class="border rounded-lg p-4 ${cssClass}">
                        <div class="font-semibold">${result.message}</div>
                    </div>
                `;
            });

            elements.verificationResults.innerHTML = html;
        }

        function copyToClipboard(text: string): void {
            navigator.clipboard.writeText(text).then(() => {
                const copyBtn = elements.copySql;
                if (copyBtn) {
                    copyBtn.textContent = '‚úÖ Copiado';
                    setTimeout(() => {
                        copyBtn.textContent = 'üìã Copiar SQL';
                    }, 2000);
                }
            }).catch(() => {
                alert('Error al copiar. Selecciona el texto manualmente.');
            });
        }

        function downloadScript(): void {
            const blob = new Blob([SQL_SCRIPT], { type: 'text/sql' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'club-canino-schema.sql';
            a.click();
            URL.revokeObjectURL(url);
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üöÄ Fase 2: Implementaci√≥n cargada');
            
            const copyBtn = elements.copySql;
            if (copyBtn) {
                copyBtn.addEventListener('click', () => copyToClipboard(SQL_SCRIPT));
            }

            const downloadBtn = elements.downloadSql;
            if (downloadBtn) {
                downloadBtn.addEventListener('click', downloadScript);
            }

            const testBtn = elements.testConnection;
            if (testBtn) {
                testBtn.addEventListener('click', testConnection);
            }

            const verifyBtn = elements.verifyImplementation;
            if (verifyBtn) {
                verifyBtn.addEventListener('click', verifyImplementation);
            }

            const proceedBtn = elements.proceedPhase3;
            if (proceedBtn) {
                proceedBtn.addEventListener('click', () => {
                    alert('üéâ ¬°Implementaci√≥n completada!\n\nFase 3: Actualizaci√≥n del c√≥digo\n\n1. Corregir referencias de users ‚Üí profiles\n2. Probar autenticaci√≥n\n3. Verificar dashboards\n4. Lanzar PWA completa');
                });
            }

            // Mostrar advertencia sobre configuraci√≥n
            updateStatus(`
                ‚ö†Ô∏è CONFIGURA TUS CREDENCIALES SUPABASE
                <div class="text-sm mt-2">
                    Edita SUPABASE_CONFIG en el c√≥digo con tu URL y ANON_KEY reales antes de probar la conexi√≥n.
                </div>
            `, 'warning');
        });
    </script>
</body>
</html>