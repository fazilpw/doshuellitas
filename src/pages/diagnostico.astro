---
// src/pages/diagnostico.astro
// P√ÅGINA DE DIAGN√ìSTICO PARA VERIFICAR CONFIGURACI√ìN


import Layout from '../layouts/Layout.astro';

// Variables de entorno para verificaci√≥n
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
const nodeEnv = import.meta.env.MODE;

// Informaci√≥n de contexto
const userAgent = Astro.request.headers.get('user-agent') || 'No disponible';
const hostname = Astro.url.hostname;
const port = Astro.url.port;
---

<Layout title="Diagn√≥stico del Sistema - Club Canino">
  <div class="min-h-screen bg-gradient-to-br from-[#FFFBF0] to-[#ACF0F4] py-8">
    <div class="container mx-auto px-4">
      
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-[#2C3E50] mb-2">
          üîç Diagn√≥stico del Sistema
        </h1>
        <p class="text-lg text-[#5B9BD5]">
          Club Canino Dos Huellitas - Verificaci√≥n de Configuraci√≥n
        </p>
      </div>

      <!-- Grid de Verificaciones -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        
        <!-- Estado de Astro -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-xl font-semibold mb-4 text-[#2C3E50]">
            üöÄ Configuraci√≥n de Astro
          </h2>
          <div class="space-y-3">
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <span>Modo de Renderizado:</span>
              <span class="badge bg-green-100 text-green-800 px-2 py-1 rounded">Server-side ‚úÖ</span>
            </div>
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <span>Entorno:</span>
              <span class="badge bg-blue-100 text-blue-800 px-2 py-1 rounded">{nodeEnv}</span>
            </div>
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <span>Servidor:</span>
              <span class="badge bg-purple-100 text-purple-800 px-2 py-1 rounded">{hostname}:{port}</span>
            </div>
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <span>Headers disponibles:</span>
              <span class="badge bg-green-100 text-green-800 px-2 py-1 rounded">‚úÖ S√≠</span>
            </div>
          </div>
        </div>

        <!-- Estado de Supabase -->
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h2 class="text-xl font-semibold mb-4 text-[#2C3E50]">
            üóÑÔ∏è Configuraci√≥n de Supabase
          </h2>
          <div class="space-y-3">
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <span>URL Configurada:</span>
              {supabaseUrl ? (
                <span class="badge bg-green-100 text-green-800 px-2 py-1 rounded">‚úÖ S√≠</span>
              ) : (
                <span class="badge bg-red-100 text-red-800 px-2 py-1 rounded">‚ùå No</span>
              )}
            </div>
            <div class="flex justify-between items-center p-3 bg-gray-50 rounded">
              <span>API Key Configurada:</span>
              {supabaseKey ? (
                <span class="badge bg-green-100 text-green-800 px-2 py-1 rounded">‚úÖ S√≠</span>
              ) : (
                <span class="badge bg-red-100 text-red-800 px-2 py-1 rounded">‚ùå No</span>
              )}
            </div>
            <div class="p-3 bg-gray-50 rounded">
              <div class="text-sm">
                <span class="font-medium">URL:</span> 
                <span class="font-mono text-xs">
                  {supabaseUrl ? supabaseUrl.substring(0, 30) + '...' : 'No configurada'}
                </span>
              </div>
            </div>
          </div>
        </div>

      </div>

      <!-- Pruebas en Tiempo Real -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-semibold mb-6 text-[#2C3E50]">
          üî¨ Pruebas en Tiempo Real
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <button 
            id="test-connection" 
            class="bg-[#56CCF2] text-white px-4 py-2 rounded-lg hover:bg-[#5B9BD5] transition-colors"
          >
            üîå Probar Conexi√≥n
          </button>
          <button 
            id="test-tables" 
            class="bg-[#C7EA46] text-white px-4 py-2 rounded-lg hover:bg-green-500 transition-colors"
          >
            üóÑÔ∏è Verificar Tablas
          </button>
          <button 
            id="test-auth" 
            class="bg-[#AB5729] text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors"
          >
            üîê Probar Auth
          </button>
        </div>

        <!-- Resultados de las Pruebas -->
        <div id="test-results" class="space-y-4">
          <div class="p-4 bg-gray-50 rounded-lg">
            <p class="text-gray-600">Haz clic en los botones para ejecutar las pruebas...</p>
          </div>
        </div>
      </div>

      <!-- Informaci√≥n del Sistema -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-xl font-semibold mb-4 text-[#2C3E50]">
          üì± Informaci√≥n del Cliente
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="p-3 bg-gray-50 rounded">
            <span class="font-medium">User Agent:</span>
            <p class="text-sm font-mono mt-1 break-all">{userAgent}</p>
          </div>
          <div class="p-3 bg-gray-50 rounded">
            <span class="font-medium">Timestamp:</span>
            <p class="text-sm font-mono mt-1">{new Date().toISOString()}</p>
          </div>
        </div>
      </div>

      <!-- Botones de Acci√≥n -->
      <div class="text-center mt-8 space-x-4">
        <a 
          href="/login" 
          class="bg-[#2C3E50] text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors inline-block"
        >
          üîë Ir al Login
        </a>
        <a 
          href="/crear-datos-prueba" 
          class="bg-[#5B9BD5] text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition-colors inline-block"
        >
          üìä Crear Datos de Prueba
        </a>
        <a 
          href="/" 
          class="bg-[#56CCF2] text-white px-6 py-3 rounded-lg hover:bg-blue-400 transition-colors inline-block"
        >
          üè† Volver al Inicio
        </a>
      </div>
    </div>
  </div>
</Layout>

<script>
  // ===============================================
  // üß™ SCRIPTS DE PRUEBA DEL SISTEMA
  // ===============================================

  import { createClient } from '@supabase/supabase-js';

  // Inicializar Supabase
  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  
  let supabase = null;
  
  if (supabaseUrl && supabaseKey) {
    supabase = createClient(supabaseUrl, supabaseKey);
  }

  // Elementos DOM
  const testResults = document.getElementById('test-results');
  const testConnection = document.getElementById('test-connection');
  const testTables = document.getElementById('test-tables');
  const testAuth = document.getElementById('test-auth');

  // ===============================================
  // üîß FUNCIONES DE PRUEBA
  // ===============================================

  function addResult(title, status, message, details = null) {
    const resultDiv = document.createElement('div');
    resultDiv.className = `p-4 rounded-lg border-l-4 ${
      status === 'success' ? 'bg-green-50 border-green-400' :
      status === 'error' ? 'bg-red-50 border-red-400' :
      'bg-yellow-50 border-yellow-400'
    }`;
    
    resultDiv.innerHTML = `
      <h3 class="font-semibold ${
        status === 'success' ? 'text-green-800' :
        status === 'error' ? 'text-red-800' :
        'text-yellow-800'
      }">${title}</h3>
      <p class="text-sm mt-1 ${
        status === 'success' ? 'text-green-700' :
        status === 'error' ? 'text-red-700' :
        'text-yellow-700'
      }">${message}</p>
      ${details ? `<pre class="text-xs mt-2 p-2 bg-gray-100 rounded overflow-auto">${details}</pre>` : ''}
    `;
    
    testResults.appendChild(resultDiv);
  }

  function clearResults() {
    testResults.innerHTML = '';
  }

  // ===============================================
  // üîå PRUEBA DE CONEXI√ìN
  // ===============================================

  async function testConnectionFunction() {
    clearResults();
    
    if (!supabase) {
      addResult(
        '‚ùå Configuraci√≥n Faltante',
        'error',
        'Variables de entorno SUPABASE_URL o SUPABASE_ANON_KEY no est√°n configuradas'
      );
      return;
    }

    try {
      // Probar conexi√≥n b√°sica
      const { data, error } = await supabase.from('profiles').select('count').limit(1);
      
      if (error) {
        addResult(
          '‚ùå Error de Conexi√≥n',
          'error',
          `No se pudo conectar a Supabase: ${error.message}`,
          JSON.stringify(error, null, 2)
        );
      } else {
        addResult(
          '‚úÖ Conexi√≥n Exitosa',
          'success',
          'Supabase est√° conectado y respondiendo correctamente'
        );
      }
    } catch (error) {
      addResult(
        '‚ùå Error de Red',
        'error',
        `Error de conexi√≥n de red: ${error.message}`,
        error.stack
      );
    }
  }

  // ===============================================
  // üóÑÔ∏è PRUEBA DE TABLAS
  // ===============================================

  async function testTablesFunction() {
    clearResults();
    
    if (!supabase) {
      addResult('‚ùå Supabase no inicializado', 'error', 'Configurar variables de entorno primero');
      return;
    }

    const tables = ['profiles', 'dogs', 'evaluations', 'photos', 'notifications'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase.from(table).select('*').limit(1);
        
        if (error) {
          addResult(
            `‚ùå Tabla ${table}`,
            'error',
            `Error: ${error.message}`,
            `C√≥digo: ${error.code}\nDetalles: ${error.details}`
          );
        } else {
          addResult(
            `‚úÖ Tabla ${table}`,
            'success',
            `Tabla existe y es accesible. ${data.length} registros encontrados en la muestra.`
          );
        }
      } catch (error) {
        addResult(
          `‚ùå Tabla ${table}`,
          'error',
          `Error de conexi√≥n: ${error.message}`
        );
      }
    }
  }

  // ===============================================
  // üîê PRUEBA DE AUTENTICACI√ìN
  // ===============================================

  async function testAuthFunction() {
    clearResults();
    
    if (!supabase) {
      addResult('‚ùå Supabase no inicializado', 'error', 'Configurar variables de entorno primero');
      return;
    }

    try {
      // Verificar sesi√≥n actual
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        addResult(
          '‚ùå Error de Sesi√≥n',
          'error',
          `Error obteniendo sesi√≥n: ${sessionError.message}`
        );
      } else if (sessionData.session) {
        addResult(
          '‚úÖ Usuario Autenticado',
          'success',
          `Usuario: ${sessionData.session.user.email}`,
          JSON.stringify({
            userId: sessionData.session.user.id,
            email: sessionData.session.user.email,
            lastSignIn: sessionData.session.user.last_sign_in_at
          }, null, 2)
        );
      } else {
        addResult(
          '‚ö†Ô∏è Sin Sesi√≥n Activa',
          'warning',
          'No hay usuario autenticado actualmente. Esto es normal si no has iniciado sesi√≥n.'
        );
      }

      // Verificar configuraci√≥n de auth
      const { data: authData, error: authError } = await supabase.auth.getUser();
      
      if (authError && authError.status !== 401) {
        addResult(
          '‚ùå Error de Auth',
          'error',
          `Error en configuraci√≥n de auth: ${authError.message}`
        );
      } else {
        addResult(
          '‚úÖ Auth Configurado',
          'success',
          'Sistema de autenticaci√≥n est√° funcionando correctamente'
        );
      }

    } catch (error) {
      addResult(
        '‚ùå Error de Auth',
        'error',
        `Error inesperado: ${error.message}`,
        error.stack
      );
    }
  }

  // ===============================================
  // üì° EVENT LISTENERS
  // ===============================================

  testConnection?.addEventListener('click', testConnectionFunction);
  testTables?.addEventListener('click', testTablesFunction);
  testAuth?.addEventListener('click', testAuthFunction);

  // ===============================================
  // üöÄ EJECUTAR PRUEBA INICIAL
  // ===============================================

  document.addEventListener('DOMContentLoaded', () => {
    addResult(
      'üîÑ Sistema Iniciado',
      'warning',
      'P√°gina de diagn√≥stico cargada. Haz clic en los botones para ejecutar las pruebas.'
    );
  });
</script>

<style>
  .badge {
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  pre {
    max-height: 200px;
    overflow-y: auto;
  }
  
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
</style>