---
// src/pages/progreso-debug.astro - DEBUG DE DATOS
const dogId = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'; // ID de Max
const dogName = 'Max';
---

<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Debug Progreso - {dogName}</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .json-display {
      background: #1f2937;
      color: #10b981;
      font-family: 'Courier New', monospace;
      font-size: 14px;
      line-height: 1.5;
      white-space: pre-wrap;
      word-break: break-word;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  
  <div class="max-w-6xl mx-auto p-6">
    
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">
        üîç Debug Progreso de {dogName}
      </h1>
      <p class="text-gray-600">
        Verificando datos de Supabase paso a paso
      </p>
      <div class="mt-4 text-sm text-gray-500">
        <strong>Dog ID:</strong> {dogId}
      </div>
    </div>

    <!-- Botones de Test -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
      <h2 class="text-xl font-bold text-gray-900 mb-4">üéØ Tests Disponibles</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        
        <button 
          id="test-connection"
          class="bg-blue-500 text-white px-4 py-3 rounded-lg hover:bg-blue-600 transition-colors"
        >
          üîå Test Conexi√≥n
        </button>
        
        <button 
          id="test-dog-data"
          class="bg-green-500 text-white px-4 py-3 rounded-lg hover:bg-green-600 transition-colors"
        >
          üêï Ver Datos del Perro
        </button>
        
        <button 
          id="test-evaluations"
          class="bg-purple-500 text-white px-4 py-3 rounded-lg hover:bg-purple-600 transition-colors"
        >
          üìä Ver Evaluaciones
        </button>
        
        <button 
          id="test-averages"
          class="bg-orange-500 text-white px-4 py-3 rounded-lg hover:bg-orange-600 transition-colors"
        >
          üìà Ver Promedios
        </button>
      </div>
    </div>

    <!-- Panel de Resultados -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
      <h2 class="text-xl font-bold text-gray-900 mb-4">üìã Resultados</h2>
      
      <!-- Status -->
      <div id="status" class="mb-4 p-4 rounded-lg bg-gray-50 border border-gray-200">
        <div class="flex items-center text-gray-600">
          <span class="mr-2">‚è≥</span>
          <span>Listo para hacer tests...</span>
        </div>
      </div>
      
      <!-- Results Display -->
      <div id="results" class="json-display p-4 rounded-lg min-h-32 border border-gray-300">
        // Los resultados de los tests aparecer√°n aqu√≠...
      </div>
    </div>

    <!-- Test de Modal -->
    <div class="bg-white rounded-lg shadow-lg p-6">
      <h2 class="text-xl font-bold text-gray-900 mb-4">üé≠ Test Modal React</h2>
      <div class="space-y-4">
        <p class="text-gray-600">
          Una vez verificados los datos, probar el modal React:
        </p>
        <div id="modal-test-container"></div>
        <button 
          id="test-modal"
          class="bg-indigo-500 text-white px-6 py-3 rounded-lg hover:bg-indigo-600 transition-colors"
        >
          üé≠ Probar Modal React
        </button>
      </div>
    </div>

  </div>

  <!-- Scripts -->
  <script type="module">
    // ============================================
    // üîß CONFIGURACI√ìN
    // ============================================
    const DOG_ID = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';
    
    let supabase = null;
    let supabaseConfig = null;
    
    // ============================================
    // üéØ FUNCIONES DE UTILIDAD
    // ============================================
    function updateStatus(message, type = 'info') {
      const statusEl = document.getElementById('status');
      const colors = {
        info: 'bg-blue-50 border-blue-200 text-blue-800',
        success: 'bg-green-50 border-green-200 text-green-800',
        error: 'bg-red-50 border-red-200 text-red-800',
        warning: 'bg-yellow-50 border-yellow-200 text-yellow-800'
      };
      
      const icons = {
        info: 'üîÑ',
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è'
      };
      
      statusEl.className = `mb-4 p-4 rounded-lg border ${colors[type]}`;
      statusEl.innerHTML = `
        <div class="flex items-center">
          <span class="mr-2">${icons[type]}</span>
          <span>${message}</span>
        </div>
      `;
    }

    function displayResults(data, title = 'Resultado') {
      const resultsEl = document.getElementById('results');
      const timestamp = new Date().toLocaleTimeString();
      
      resultsEl.textContent = `// ${title} - ${timestamp}\n\n${JSON.stringify(data, null, 2)}`;
    }

    // ============================================
    // üîå TEST 1: CONEXI√ìN A SUPABASE
    // ============================================
    async function testConnection() {
      try {
        updateStatus('Probando conexi√≥n a Supabase...', 'info');
        
        // Importar Supabase
        const { createClient } = await import('@supabase/supabase-js');
        
        // Configurar cliente
        supabaseConfig = {
          url: import.meta.env.PUBLIC_SUPABASE_URL,
          key: import.meta.env.PUBLIC_SUPABASE_ANON_KEY
        };
        
        if (!supabaseConfig.url || !supabaseConfig.key) {
          throw new Error('Faltan variables de entorno de Supabase');
        }
        
        supabase = createClient(supabaseConfig.url, supabaseConfig.key);
        
        // Test simple: contar profiles
        const { count, error } = await supabase
          .from('profiles')
          .select('*', { count: 'exact', head: true });
          
        if (error) throw error;
        
        updateStatus(`‚úÖ Conexi√≥n exitosa - ${count} profiles encontrados`, 'success');
        displayResults({
          connection: 'SUCCESS',
          profiles_count: count,
          supabase_url: supabaseConfig.url.substring(0, 30) + '...',
          timestamp: new Date().toISOString()
        }, 'Test Conexi√≥n');
        
      } catch (error) {
        updateStatus(`‚ùå Error de conexi√≥n: ${error.message}`, 'error');
        displayResults({
          connection: 'FAILED',
          error: error.message,
          stack: error.stack
        }, 'Error Conexi√≥n');
      }
    }

    // ============================================
    // üêï TEST 2: DATOS DEL PERRO
    // ============================================
    async function testDogData() {
      try {
        if (!supabase) {
          throw new Error('Primero ejecuta "Test Conexi√≥n"');
        }
        
        updateStatus('Obteniendo datos del perro...', 'info');
        
        const { data, error } = await supabase
          .from('dogs')
          .select(`
            *,
            profiles!dogs_owner_id_fkey(full_name, email, role)
          `)
          .eq('id', DOG_ID)
          .single();
          
        if (error) throw error;
        
        if (!data) {
          throw new Error(`No se encontr√≥ perro con ID: ${DOG_ID}`);
        }
        
        updateStatus(`‚úÖ Perro encontrado: ${data.name}`, 'success');
        displayResults(data, 'Datos del Perro');
        
      } catch (error) {
        updateStatus(`‚ùå Error obteniendo datos del perro: ${error.message}`, 'error');
        displayResults({
          error: error.message,
          dog_id: DOG_ID
        }, 'Error Datos Perro');
      }
    }

    // ============================================
    // üìä TEST 3: EVALUACIONES
    // ============================================
    async function testEvaluations() {
      try {
        if (!supabase) {
          throw new Error('Primero ejecuta "Test Conexi√≥n"');
        }
        
        updateStatus('Obteniendo evaluaciones...', 'info');
        
        const { data, error } = await supabase
          .from('evaluations')
          .select(`
            *,
            profiles!evaluations_evaluator_id_fkey(full_name, email, role)
          `)
          .eq('dog_id', DOG_ID)
          .order('date', { ascending: false })
          .limit(10);
          
        if (error) throw error;
        
        updateStatus(`‚úÖ ${data?.length || 0} evaluaciones encontradas`, 'success');
        displayResults({
          total_evaluations: data?.length || 0,
          evaluations: data || []
        }, 'Evaluaciones');
        
      } catch (error) {
        updateStatus(`‚ùå Error obteniendo evaluaciones: ${error.message}`, 'error');
        displayResults({
          error: error.message,
          dog_id: DOG_ID
        }, 'Error Evaluaciones');
      }
    }

    // ============================================
    // üìà TEST 4: PROMEDIOS (FUNCI√ìN PERSONALIZADA)
    // ============================================
    async function testAverages() {
      try {
        if (!supabase) {
          throw new Error('Primero ejecuta "Test Conexi√≥n"');
        }
        
        updateStatus('Calculando promedios...', 'info');
        
        // Obtener evaluaciones para calcular promedios
        const { data: evaluations, error } = await supabase
          .from('evaluations')
          .select('energy_level, sociability_level, obedience_level, anxiety_level, location, date')
          .eq('dog_id', DOG_ID)
          .order('date', { ascending: false });

        if (error) throw error;

        if (!evaluations || evaluations.length === 0) {
          updateStatus('‚ö†Ô∏è No hay evaluaciones para calcular promedios', 'warning');
          displayResults({
            message: 'Sin evaluaciones disponibles',
            dog_id: DOG_ID
          }, 'Promedios');
          return;
        }

        // Calcular promedios manualmente
        const totalEvaluations = evaluations.length;
        
        const averages = {
          energy: Math.round(evaluations.reduce((sum, item) => sum + (item.energy_level || 0), 0) / totalEvaluations),
          sociability: Math.round(evaluations.reduce((sum, item) => sum + (item.sociability_level || 0), 0) / totalEvaluations),
          obedience: Math.round(evaluations.reduce((sum, item) => sum + (item.obedience_level || 0), 0) / totalEvaluations),
          anxiety: Math.round(evaluations.reduce((sum, item) => sum + (item.anxiety_level || 0), 0) / totalEvaluations)
        };

        // Convertir a porcentajes
        const percentages = {
          energy_percentage: Math.round((averages.energy / 10) * 100),
          sociability_percentage: Math.round((averages.sociability / 10) * 100),
          obedience_percentage: Math.round((averages.obedience / 10) * 100),
          anxiety_percentage: Math.round((averages.anxiety / 10) * 100)
        };

        // Contar por ubicaci√≥n
        const casaEvaluations = evaluations.filter(item => item.location === 'casa').length;
        const colegioEvaluations = evaluations.filter(item => item.location === 'colegio').length;

        const result = {
          ...percentages,
          total_evaluations: totalEvaluations,
          casa_evaluations: casaEvaluations,
          colegio_evaluations: colegioEvaluations,
          last_evaluation_date: evaluations[0]?.date || null,
          raw_averages: averages,
          raw_evaluations: evaluations
        };
        
        updateStatus(`‚úÖ Promedios calculados correctamente`, 'success');
        displayResults(result, 'Promedios Calculados');
        
      } catch (error) {
        updateStatus(`‚ùå Error calculando promedios: ${error.message}`, 'error');
        displayResults({
          error: error.message,
          dog_id: DOG_ID
        }, 'Error Promedios');
      }
    }

    // ============================================
    // üé≠ TEST 5: MODAL REACT
    // ============================================
    async function testModal() {
      try {
        updateStatus('Cargando modal React...', 'info');
        
        // Importar React y componente
        const { default: React, useState, useEffect } = await import('react');
        const { createRoot } = await import('react-dom/client');
        
        // Crear componente de prueba simple
        const TestModal = () => {
          const [isOpen, setIsOpen] = React.useState(false);
          
          const modalContent = (
            <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
              <div class="bg-white rounded-xl w-full max-w-2xl p-6">
                <div class="flex justify-between items-center mb-4">
                  <h2 class="text-2xl font-bold text-gray-900">üé≠ Modal de Prueba</h2>
                  <button 
                    onClick={() => setIsOpen(false)}
                    class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300"
                  >
                    ‚úï
                  </button>
                </div>
                <div class="space-y-4">
                  <p>‚úÖ Modal React renderizado correctamente</p>
                  <p>‚úÖ Overlay y backdrop funcionando</p>
                  <p>‚úÖ CSS de Tailwind aplicado</p>
                  <p>‚úÖ Bot√≥n de cerrar funcional</p>
                </div>
                <div class="mt-6">
                  <button 
                    onClick={() => setIsOpen(false)}
                    class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                  >
                    Cerrar Modal
                  </button>
                </div>
              </div>
            </div>
          );
          
          return React.createElement('div', {}, [
            React.createElement('button', {
              key: 'btn',
              onClick: () => setIsOpen(true),
              className: 'bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600'
            }, 'üöÄ Abrir Modal React'),
            
            isOpen ? modalContent : null
          ]);
        };
        
        // Renderizar en el container
        const container = document.getElementById('modal-test-container');
        const root = createRoot(container);
        root.render(React.createElement(TestModal));
        
        updateStatus(`‚úÖ Modal React cargado exitosamente`, 'success');
        displayResults({
          modal_status: 'LOADED',
          react_version: React.version || 'unknown',
          container_id: 'modal-test-container'
        }, 'Modal React Test');
        
      } catch (error) {
        updateStatus(`‚ùå Error cargando modal React: ${error.message}`, 'error');
        displayResults({
          error: error.message,
          stack: error.stack
        }, 'Error Modal React');
      }
    }

    // ============================================
    // üéØ EVENT LISTENERS
    // ============================================
    document.getElementById('test-connection').addEventListener('click', testConnection);
    document.getElementById('test-dog-data').addEventListener('click', testDogData);
    document.getElementById('test-evaluations').addEventListener('click', testEvaluations);
    document.getElementById('test-averages').addEventListener('click', testAverages);
    document.getElementById('test-modal').addEventListener('click', testModal);
    
    // Auto-ejecutar test de conexi√≥n al cargar
    updateStatus('P√°gina cargada - Listo para hacer tests', 'info');
    
  </script>

</body>
</html>