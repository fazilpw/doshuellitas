---
// src/pages/dashboard/padre.astro - CON DATOS REALES DE SUPABASE
import Layout from '../../layouts/Layout.astro';
import { createClient } from '@supabase/supabase-js';

// ===============================================
// 🔧 CONFIGURACIÓN SUPABASE
// ===============================================

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

let userProfile = null;
let userDogs = [];
let recentEvaluations = [];
let hasSupabaseConnection = false;

// ===============================================
// 📊 CARGAR DATOS REALES DE SUPABASE
// ===============================================

if (supabaseUrl && supabaseKey) {
  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    hasSupabaseConnection = true;

    // 1. Cargar perfil de María (usuario padre de prueba)
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', 'maria@gmail.com')
      .single();

    if (!profileError && profile) {
      userProfile = profile;
      
      // 2. Cargar perros de María
      const { data: dogs, error: dogsError } = await supabase
        .from('dogs')
        .select('*')
        .eq('owner_id', profile.id)
        .eq('active', true)
        .order('name');

      if (!dogsError && dogs) {
        userDogs = dogs;
        
        // 3. Cargar evaluaciones recientes de los perros
        const dogIds = dogs.map(dog => dog.id);
        if (dogIds.length > 0) {
          const { data: evaluations, error: evalError } = await supabase
            .from('evaluations')
            .select(`
              *,
              dogs(name, breed),
              profiles(full_name, role)
            `)
            .in('dog_id', dogIds)
            .order('date', { ascending: false })
            .limit(10);

          if (!evalError && evaluations) {
            recentEvaluations = evaluations;
          }
        }
      }
    }
  } catch (error) {
    console.error('Error loading Supabase data:', error);
    hasSupabaseConnection = false;
  }
}

// ===============================================
// 📝 DATOS PARA LA PÁGINA
// ===============================================

const displayName = userProfile?.full_name || 'Usuario Padre';
const userRole = userProfile?.role || 'padre';
const userEmail = userProfile?.email || '';
const totalDogs = userDogs.length;
const totalEvaluations = recentEvaluations.length;

// Calcular estadísticas
const evaluationsThisWeek = recentEvaluations.filter(evaluation => {
  const evaluationDate = new Date(evaluation.date);
  const weekAgo = new Date();
  weekAgo.setDate(weekAgo.getDate() - 7);
  return evaluationDate >= weekAgo;
}).length;

// Promedio de energía de todos los perros
const avgEnergy = recentEvaluations.length > 0 
  ? Math.round(recentEvaluations.reduce((sum, evaluation) => sum + (evaluation.energy_level || 0), 0) / recentEvaluations.length)
  : 0;
---

<Layout title="Mi Dashboard - Club Canino">
  <div class="min-h-screen bg-gradient-to-br from-[#FFFBF0] to-[#ACF0F4] py-8">
    <div class="max-w-6xl mx-auto px-4">
      
      <!-- Header Principal -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-[#2C3E50] mb-4">🐕 Dashboard Padre</h1>
        <p class="text-xl text-gray-600">Bienvenido {displayName}</p>
        <div class="inline-block bg-[#56CCF2] text-white px-4 py-2 rounded-full mt-2">
          👨‍👩‍👧‍👦 Rol: {userRole}
        </div>
        {userEmail && (
          <p class="text-sm text-gray-500 mt-2">{userEmail}</p>
        )}
      </div>

      <!-- Estado de Conexión -->
      {hasSupabaseConnection ? (
        <div class="bg-green-50 border border-green-200 rounded-xl p-6 mb-8">
          <h2 class="text-2xl font-bold text-green-800 mb-4">✅ Conectado a Supabase</h2>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 text-green-700">
            <div class="flex items-center">
              <span class="text-xl mr-2">🐕</span>
              <div>
                <div class="font-semibold">{totalDogs}</div>
                <div class="text-sm">Mascotas</div>
              </div>
            </div>
            <div class="flex items-center">
              <span class="text-xl mr-2">📊</span>
              <div>
                <div class="font-semibold">{totalEvaluations}</div>
                <div class="text-sm">Evaluaciones</div>
              </div>
            </div>
            <div class="flex items-center">
              <span class="text-xl mr-2">📅</span>
              <div>
                <div class="font-semibold">{evaluationsThisWeek}</div>
                <div class="text-sm">Esta semana</div>
              </div>
            </div>
            <div class="flex items-center">
              <span class="text-xl mr-2">⚡</span>
              <div>
                <div class="font-semibold">{avgEnergy}/10</div>
                <div class="text-sm">Energía promedio</div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div class="bg-red-50 border border-red-200 rounded-xl p-6 mb-8">
          <h2 class="text-2xl font-bold text-red-800 mb-4">❌ Error de Conexión</h2>
          <p class="text-red-700">No se pudo conectar a Supabase. Verifica la configuración.</p>
        </div>
      )}

      <!-- Mis Mascotas -->
      {userDogs.length > 0 ? (
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-[#2C3E50]">🐕 Mis Mascotas</h2>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {userDogs.map((dog) => {
              // Calcular evaluaciones de este perro
              const dogEvaluations = recentEvaluations.filter(evaluation => evaluation.dog_id === dog.id);
              const lastEvaluation = dogEvaluations[0]; // Más reciente
              
              return (
                <div class="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
                  <div class="text-center mb-4">
                    <div class="text-4xl mb-2">🐕</div>
                    <h3 class="text-xl font-bold text-[#2C3E50]">{dog.name}</h3>
                    <p class="text-gray-600 text-sm">
                      {dog.breed} • {dog.size} • {dog.age} años
                    </p>
                    {dog.notes && (
                      <p class="text-gray-500 text-xs mt-2">{dog.notes}</p>
                    )}
                  </div>
                  
                  {lastEvaluation ? (
                    <div class="space-y-2 mb-4">
                      <div class="text-sm text-gray-600">
                        <strong>Última evaluación:</strong> {new Date(lastEvaluation.date).toLocaleDateString('es-ES')}
                      </div>
                      <div class="text-sm text-gray-600">
                        <strong>Lugar:</strong> {lastEvaluation.location === 'casa' ? '🏠 Casa' : '🏫 Colegio'}
                      </div>
                      {lastEvaluation.energy_level && (
                        <div class="text-sm">
                          <strong>Energía:</strong> {lastEvaluation.energy_level}/10
                          <div class="w-full bg-gray-200 rounded-full h-2 mt-1">
                            <div 
                              class="bg-[#56CCF2] h-2 rounded-full" 
                              style={`width: ${(lastEvaluation.energy_level / 10) * 100}%`}
                            ></div>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div class="text-center text-gray-500 text-sm mb-4">
                      Sin evaluaciones recientes
                    </div>
                  )}
                  
                  <div class="space-y-2">
                    <button 
                      class="w-full bg-[#56CCF2] text-white py-2 px-4 rounded-lg hover:bg-[#5B9BD5] transition-colors text-sm"
                      onclick={`showEvaluationModal('${dog.id}', '${dog.name}')`}
                    >
                      📝 Evaluar en Casa
                    </button>
                    <button 
                      class="w-full border border-[#56CCF2] text-[#56CCF2] py-2 px-4 rounded-lg hover:bg-[#56CCF2] hover:text-white transition-colors text-sm"
                      onclick={`showProgressModal('${dog.id}', '${dog.name}')`}
                    >
                      📊 Ver Progreso
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ) : (
        <div class="bg-white rounded-xl shadow-lg p-8 text-center">
          <div class="text-6xl mb-4">🐕</div>
          <h3 class="text-xl font-bold text-[#2C3E50] mb-2">No hay mascotas registradas</h3>
          <p class="text-gray-600 mb-6">
            {hasSupabaseConnection 
              ? 'Contacta al administrador para registrar tus mascotas.' 
              : 'Verifica la conexión a Supabase para cargar tus mascotas.'
            }
          </p>
        </div>
      )}

      <!-- Evaluaciones Recientes -->
      {recentEvaluations.length > 0 && (
        <div class="bg-white rounded-xl shadow-lg p-6">
          <h2 class="text-2xl font-bold text-[#2C3E50] mb-6">📊 Evaluaciones Recientes</h2>
          
          <div class="overflow-x-auto">
            <table class="w-full text-sm">
              <thead>
                <tr class="border-b border-gray-200">
                  <th class="text-left py-3 px-4">Fecha</th>
                  <th class="text-left py-3 px-4">Mascota</th>
                  <th class="text-left py-3 px-4">Lugar</th>
                  <th class="text-left py-3 px-4">Energía</th>
                  <th class="text-left py-3 px-4">Evaluador</th>
                </tr>
              </thead>
              <tbody>
                {recentEvaluations.slice(0, 5).map((evaluation) => (
                  <tr class="border-b border-gray-100 hover:bg-gray-50">
                    <td class="py-3 px-4">
                      {new Date(evaluation.date).toLocaleDateString('es-ES')}
                    </td>
                    <td class="py-3 px-4 font-medium">
                      {evaluation.dogs?.name || 'N/A'}
                    </td>
                    <td class="py-3 px-4">
                      {evaluation.location === 'casa' ? '🏠 Casa' : '🏫 Colegio'}
                    </td>
                    <td class="py-3 px-4">
                      {evaluation.energy_level ? `${evaluation.energy_level}/10` : 'N/A'}
                    </td>
                    <td class="py-3 px-4 text-gray-600">
                      {evaluation.profiles?.full_name || 'N/A'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {recentEvaluations.length > 5 && (
            <div class="text-center mt-4">
              <button class="text-[#56CCF2] hover:text-[#5B9BD5] text-sm font-medium">
                Ver todas las evaluaciones ({recentEvaluations.length})
              </button>
            </div>
          )}
        </div>
      )}

      <!-- Enlaces útiles -->
      <div class="mt-8 text-center space-x-4">
        <a href="/crear-datos-prueba/" class="text-[#56CCF2] hover:text-[#5B9BD5] text-sm">
          🔧 Crear Datos de Prueba
        </a>
        <a href="/diagnostico/" class="text-[#56CCF2] hover:text-[#5B9BD5] text-sm">
          📊 Diagnóstico del Sistema
        </a>
        <a href="/login/" class="text-[#56CCF2] hover:text-[#5B9BD5] text-sm">
          🔑 Cambiar Usuario
        </a>
      </div>

    </div>
  </div>

  <!-- Modal placeholder (se cargará dinámicamente) -->
  <div id="modal-container"></div>

  <!-- Scripts -->
  <script>
    // ===============================================
    // 🔧 FUNCIONES DE INTERACCIÓN CON TIPOS
    // ===============================================

    function showEvaluationModal(dogId: string, dogName: string): void {
      alert(`Evaluar a ${dogName} (ID: ${dogId})\n\nModal de evaluación en desarrollo...`);
    }

    function showProgressModal(dogId: string, dogName: string): void {
      alert(`Progreso de ${dogName} (ID: ${dogId})\n\nModal de progreso en desarrollo...`);
    }

    // ===============================================
    // 🌐 DECLARACIONES GLOBALES
    // ===============================================

    // Extender Window interface
    declare global {
      interface Window {
        showEvaluationModal: (dogId: string, dogName: string) => void;
        showProgressModal: (dogId: string, dogName: string) => void;
      }
    }

    // Asignar a window
    (window as any).showEvaluationModal = showEvaluationModal;
    (window as any).showProgressModal = showProgressModal;

    // ===============================================
    // 🚀 INICIALIZACIÓN
    // ===============================================

    document.addEventListener('DOMContentLoaded', function(): void {
      console.log('✅ Dashboard padre cargado');
      console.log('📊 Datos cargados:', {
        hasSupabase: `{hasSupabaseConnection}`,
        userProfile: `{userProfile ? userProfile.full_name : 'No cargado'}`,
        totalDogs: `{totalDogs}`,
        totalEvaluations: `{totalEvaluations}`
      });
    });
  </script>
</Layout>