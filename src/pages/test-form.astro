---
// src/pages/test-form.astro - CORREGIDO
import Layout from '../layouts/Layout.astro';
---

<Layout title="Test Formulario">
  <div class="min-h-screen bg-[#FFFBF0] py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold text-[#2C3E50] mb-4">
          üß™ Prueba Directa del Formulario
        </h1>
        <p class="text-gray-600">
          Probar el formulario de evaluaci√≥n sin dashboard
        </p>
      </div>

      <!-- Botones para abrir formulario -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        
        <div class="bg-white rounded-xl shadow-lg p-6 text-center">
          <h3 class="text-lg font-bold text-[#2C3E50] mb-4">
            Formulario como Padre
          </h3>
          <button 
            id="open-parent-form"
            class="w-full bg-[#56CCF2] text-white py-3 px-4 rounded-lg hover:bg-[#5B9BD5] transition-colors font-medium"
          >
            üìù Abrir Formulario (Casa)
          </button>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-6 text-center">
          <h3 class="text-lg font-bold text-[#2C3E50] mb-4">
            Formulario como Profesor
          </h3>
          <button 
            id="open-teacher-form"
            class="w-full bg-[#C7EA46] text-[#2C3E50] py-3 px-4 rounded-lg hover:bg-[#FFFE8D] transition-colors font-medium"
          >
            üìù Abrir Formulario (Colegio)
          </button>
        </div>

      </div>

      <!-- Informaci√≥n de debug -->
      <div class="bg-white rounded-xl shadow-lg p-6">
        <h3 class="text-lg font-bold text-[#2C3E50] mb-4">üîç Debug Info</h3>
        <div id="debug-info" class="text-sm text-gray-600">
          Cargando informaci√≥n de debug...
        </div>
      </div>

    </div>
  </div>

  <!-- Contenedor para el formulario -->
  <div id="form-container"></div>

  <script>
    type UserRole = 'padre' | 'profesor';

    // ‚úÖ TIPOS PARA SUPABASE
    interface SupabaseResponse<T = any> {
      data: T | null;
      error: { message: string } | null;
    }

    interface SupabaseClient {
      from: (table: string) => {
        insert: (data: any[]) => {
          select: () => Promise<SupabaseResponse>;
        };
      };
    }

    interface SupabaseModule {
      supabase: SupabaseClient;
      default: SupabaseClient;
    }

    // Funci√≥n para crear el formulario din√°micamente
    async function createFormComponent(userRole: UserRole): Promise<void> {
      const formContainer = document.getElementById('form-container');
      if (!formContainer) return;

      const formElement = document.createElement('div');
      formElement.innerHTML = `
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div class="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6">
              <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-[#2C3E50]">
                  üìù Evaluaci√≥n ${userRole === 'padre' ? '(Casa)' : '(Colegio)'}
                </h2>
                <button id="close-form" class="text-gray-400 hover:text-gray-600 text-xl">
                  √ó
                </button>
              </div>

              <form id="test-evaluation-form" class="space-y-6">

                <!-- M√©tricas principales -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      ‚ö° Nivel de Energ√≠a
                    </label>
                    <select name="energy_level" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#56CCF2] focus:border-transparent">
                      <option value="1">1 - Muy bajo</option>
                      <option value="2">2 - Bajo</option>
                      <option value="3">3 - Normal bajo</option>
                      <option value="4">4 - Normal</option>
                      <option value="5" selected>5 - Normal</option>
                      <option value="6">6 - Normal alto</option>
                      <option value="7">7 - Alto</option>
                      <option value="8">8 - Muy alto</option>
                      <option value="9">9 - Hiperactivo</option>
                      <option value="10">10 - Extremo</option>
                    </select>
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      üêï Sociabilidad
                    </label>
                    <select name="sociability_level" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#56CCF2] focus:border-transparent">
                      <option value="1">1 - Muy t√≠mido</option>
                      <option value="2">2 - T√≠mido</option>
                      <option value="3">3 - Reservado</option>
                      <option value="4">4 - Normal</option>
                      <option value="5" selected>5 - Sociable</option>
                      <option value="6">6 - Muy sociable</option>
                      <option value="7">7 - Extrovertido</option>
                      <option value="8">8 - Muy extrovertido</option>
                      <option value="9">9 - Busca atenci√≥n</option>
                      <option value="10">10 - Centro de atenci√≥n</option>
                    </select>
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      üéØ Obediencia
                    </label>
                    <select name="obedience_level" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#56CCF2] focus:border-transparent">
                      <option value="1">1 - No obedece</option>
                      <option value="2">2 - Rara vez</option>
                      <option value="3">3 - A veces</option>
                      <option value="4">4 - Frecuentemente</option>
                      <option value="5" selected>5 - Normal</option>
                      <option value="6">6 - Bien</option>
                      <option value="7">7 - Muy bien</option>
                      <option value="8">8 - Excelente</option>
                      <option value="9">9 - Excepcional</option>
                      <option value="10">10 - Perfecto</option>
                    </select>
                  </div>

                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                      üò∞ Nivel de Ansiedad
                    </label>
                    <select name="anxiety_level" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#56CCF2] focus:border-transparent">
                      <option value="1">1 - Muy relajado</option>
                      <option value="2">2 - Relajado</option>
                      <option value="3">3 - Tranquilo</option>
                      <option value="4">4 - Normal</option>
                      <option value="5" selected>5 - Ligeramente ansioso</option>
                      <option value="6">6 - Ansioso</option>
                      <option value="7">7 - Muy ansioso</option>
                      <option value="8">8 - Estresado</option>
                      <option value="9">9 - Muy estresado</option>
                      <option value="10">10 - P√°nico</option>
                    </select>
                  </div>

                </div>

                <!-- Notas -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">
                    üìù Notas adicionales
                  </label>
                  <textarea 
                    name="notes" 
                    rows="4" 
                    class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#56CCF2] focus:border-transparent"
                    placeholder="Observaciones sobre el comportamiento, eventos especiales, mejoras notadas, etc."
                  ></textarea>
                </div>

                <div class="flex justify-end space-x-4">
                  <button 
                    type="button"
                    id="cancel-form"
                    class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-100"
                  >
                    Cancelar
                  </button>
                  <button 
                    type="submit"
                    class="px-6 py-2 bg-[#56CCF2] text-white rounded-md hover:bg-[#5B9BD5]"
                  >
                    üíæ Guardar Evaluaci√≥n
                  </button>
                </div>

              </form>
            </div>
          </div>
        </div>
      `;
      
      formContainer.appendChild(formElement);

      // Event listeners
      const closeButton = document.getElementById('close-form');
      if (closeButton) {
        closeButton.addEventListener('click', () => {
          formContainer.innerHTML = '';
        });
      }

      const cancelButton = document.getElementById('cancel-form');
      if (cancelButton) {
        cancelButton.addEventListener('click', () => {
          formContainer.innerHTML = '';
        });
      }

      // Manejar env√≠o del formulario
      const form = document.getElementById('test-evaluation-form');
      if (form) {
        form.addEventListener('submit', async (e: Event) => {
          e.preventDefault();
          
          const target = e.target as HTMLFormElement;
          if (!target) return;
          
          const formData = new FormData(target);
          const evaluationData = {
            dog_id: 'test-dog-max',
            evaluator_id: userRole === 'padre' ? 'test-user-padre' : 'test-user-profesor',
            location: userRole === 'padre' ? 'casa' : 'colegio',
            date: new Date().toISOString().split('T')[0],
            energy_level: parseInt(formData.get('energy_level') as string || '5'),
            sociability_level: parseInt(formData.get('sociability_level') as string || '5'),
            obedience_level: parseInt(formData.get('obedience_level') as string || '5'),
            anxiety_level: parseInt(formData.get('anxiety_level') as string || '5'),
            notes: formData.get('notes') as string || ''
          };

          try {
            console.log('Guardando evaluaci√≥n:', evaluationData);
            
            // ‚úÖ TIPOS CORREGIDOS - Intentar guardar en Supabase si est√° disponible
            try {
              const module = await import('../lib/supabase.js') as SupabaseModule;
              const supabase: SupabaseClient = module.supabase || module.default;
              
              const result: SupabaseResponse = await supabase
                .from('evaluations')
                .insert([evaluationData])
                .select();
              
              if (result.error) throw new Error(result.error.message);
              
              alert('‚úÖ Evaluaci√≥n guardada exitosamente en la base de datos!');
              updateDebugInfo('‚úÖ Evaluaci√≥n guardada en Supabase: ' + JSON.stringify(result.data));
              
            } catch (supabaseError: unknown) {
              console.log('Supabase no disponible, simulando guardado:', supabaseError);
              alert('‚úÖ Evaluaci√≥n procesada (modo demo - Supabase no configurado)');
              updateDebugInfo('‚ö†Ô∏è Evaluaci√≥n procesada en modo demo');
            }
            
            formContainer.innerHTML = '';
            
          } catch (error: unknown) {
            console.error('Error:', error);
            const errorMessage = error instanceof Error ? error.message : String(error);
            alert('‚ùå Error al guardar: ' + errorMessage);
            updateDebugInfo('‚ùå Error: ' + errorMessage);
          }
        });
      }
    }

    // Event listeners para los botones principales
    const parentButton = document.getElementById('open-parent-form');
    if (parentButton) {
      parentButton.addEventListener('click', () => {
        createFormComponent('padre');
        updateDebugInfo('üè† Abriendo formulario como padre...');
      });
    }

    const teacherButton = document.getElementById('open-teacher-form');
    if (teacherButton) {
      teacherButton.addEventListener('click', () => {
        createFormComponent('profesor');
        updateDebugInfo('üè´ Abriendo formulario como profesor...');
      });
    }

    // Funci√≥n para actualizar info de debug
    function updateDebugInfo(message: string): void {
      const debugDiv = document.getElementById('debug-info');
      if (debugDiv) {
        const timestamp = new Date().toLocaleTimeString();
        debugDiv.innerHTML += `<br/>[${timestamp}] ${message}`;
      }
    }

    // Informaci√≥n inicial de debug
    document.addEventListener('DOMContentLoaded', () => {
      updateDebugInfo('‚úÖ P√°gina cargada correctamente');
      updateDebugInfo('üìã Formularios listos para probar');
      
      // Verificar que Supabase est√© disponible
      import('../lib/supabase.js')
        .then(() => {
          updateDebugInfo('‚úÖ Supabase m√≥dulo disponible');
        })
        .catch(() => {
          updateDebugInfo('‚ùå Supabase no disponible - modo demo');
        });
    });
  </script>

</Layout>