// ============================================
// üîî INTEGRACI√ìN REAL DE NOTIFICACIONES
// ============================================

// 1. CREAR HELPER DE NOTIFICACIONES
// src/utils/notificationHelper.js

import supabase from '../lib/supabase.js';

export class NotificationHelper {
  
  // ============================================
  // üéØ NOTIFICACIONES DE COMPORTAMIENTO
  // ============================================
  
  static async checkBehaviorAlertsAfterEvaluation(evaluation, dog, evaluator) {
    console.log('üîç Verificando alertas de comportamiento...');
    
    try {
      // 1. ANSIEDAD ALTA (>= 8)
      if (evaluation.anxiety_level >= 8) {
        await supabase.rpc('create_notification_from_template', {
          user_id_param: dog.owner_id,
          dog_id_param: dog.id,
          template_key_param: 'behavior_alert',
          variables_param: {
            dogName: dog.name,
            behavior: 'ansiedad alta',
            recommendation: 'practicar ejercicios de relajaci√≥n y evitar lugares muy concurridos'
          }
        });
        console.log(`üö® Alerta ansiedad enviada para ${dog.name}`);
      }

      // 2. OBEDIENCIA MEJORADA (>= 8 y era menor antes)
      if (evaluation.obedience_level >= 8) {
        // Buscar evaluaci√≥n anterior para comparar
        const { data: prevEvaluation } = await supabase
          .from('evaluations')
          .select('obedience_level')
          .eq('dog_id', dog.id)
          .neq('id', evaluation.id)
          .order('created_at', { ascending: false })
          .limit(1)
          .single();

        if (!prevEvaluation || prevEvaluation.obedience_level < 6) {
          await supabase.rpc('create_notification_from_template', {
            user_id_param: dog.owner_id,
            dog_id_param: dog.id,
            template_key_param: 'behavior_improvement',
            variables_param: {
              dogName: dog.name,
              area: 'obediencia',
              details: `¬°Ha mejorado de ${prevEvaluation?.obedience_level || 'N/A'} a ${evaluation.obedience_level}! Sigue con el buen trabajo.`
            }
          });
          console.log(`üéâ Mejora obediencia enviada para ${dog.name}`);
        }
      }

      // 3. SOCIALIZACI√ìN EXCELENTE (>= 9)
      if (evaluation.sociability_level >= 9) {
        await supabase.rpc('create_notification_from_template', {
          user_id_param: dog.owner_id,
          dog_id_param: dog.id,
          template_key_param: 'behavior_improvement',
          variables_param: {
            dogName: dog.name,
            area: 'socializaci√≥n',
            details: '¬°Socializaci√≥n excelente hoy! Es un ejemplo para otros perros.'
          }
        });
        console.log(`üåü Socializaci√≥n excelente enviada para ${dog.name}`);
      }

      // 4. ENERG√çA MUY ALTA (>= 9) - Sugerir m√°s ejercicio
      if (evaluation.energy_level >= 9) {
        await supabase.rpc('create_notification_from_template', {
          user_id_param: dog.owner_id,
          dog_id_param: dog.id,
          template_key_param: 'behavior_alert',
          variables_param: {
            dogName: dog.name,
            behavior: 'energ√≠a muy alta',
            recommendation: 'aumentar tiempo de ejercicio y juegos de estimulaci√≥n mental'
          }
        });
        console.log(`‚ö° Energ√≠a alta enviada para ${dog.name}`);
      }

    } catch (error) {
      console.error('‚ùå Error enviando notificaciones de comportamiento:', error);
    }
  }

  // ============================================
  // üöê NOTIFICACIONES DE TRANSPORTE
  // ============================================
  
  static async notifyTransportSequence(vehicleId, dogIds, route) {
    console.log('üöê Iniciando secuencia de notificaciones de transporte...');
    
    try {
      // Obtener informaci√≥n de los perros
      const { data: dogs } = await supabase
        .from('dogs')
        .select('id, name, owner_id')
        .in('id', dogIds);

      for (const dog of dogs) {
        // 1. NOTIFICAR INICIO DE RUTA
        await supabase.rpc('create_notification_from_template', {
          user_id_param: dog.owner_id,
          dog_id_param: dog.id,
          template_key_param: 'transport_started',
          variables_param: {
            dogName: dog.name,
            eta: '25' // Puedes calcular ETA real basado en ubicaci√≥n
          }
        });

        // 2. PROGRAMAR NOTIFICACI√ìN "ACERC√ÅNDOSE" (15 minutos despu√©s)
        const approachingTime = new Date(Date.now() + 15 * 60 * 1000);
        await supabase.from('scheduled_notifications').insert({
          user_id: dog.owner_id,
          dog_id: dog.id,
          template_key: 'transport_approaching',
          variables: {
            dogName: dog.name,
            minutes: '5'
          },
          scheduled_for: approachingTime.toISOString(),
          status: 'pending'
        });

        // 3. PROGRAMAR NOTIFICACI√ìN "RECOGIDO" (20 minutos despu√©s)
        const pickedUpTime = new Date(Date.now() + 20 * 60 * 1000);
        await supabase.from('scheduled_notifications').insert({
          user_id: dog.owner_id,
          dog_id: dog.id,
          template_key: 'dog_picked_up',
          variables: {
            dogName: dog.name
          },
          scheduled_for: pickedUpTime.toISOString(),
          status: 'pending'
        });
      }

      console.log(`‚úÖ Secuencia de transporte programada para ${dogs.length} perros`);
    } catch (error) {
      console.error('‚ùå Error en notificaciones de transporte:', error);
    }
  }

  // ============================================
  // üíä NOTIFICACIONES M√âDICAS AUTOM√ÅTICAS
  // ============================================
  
  static async checkMedicalReminders() {
    console.log('üíä Verificando recordatorios m√©dicos...');
    
    try {
      // VACUNAS PR√ìXIMAS A VENCER (pr√≥ximos 7 d√≠as)
      const nextWeek = new Date();
      nextWeek.setDate(nextWeek.getDate() + 7);

      const { data: upcomingVaccines } = await supabase
        .from('dog_vaccines')
        .select(`
          *,
          dog:dogs(name, owner_id)
        `)
        .gte('next_due_date', new Date().toISOString().split('T')[0])
        .lte('next_due_date', nextWeek.toISOString().split('T')[0]);

      for (const vaccine of upcomingVaccines) {
        const daysUntil = Math.ceil((new Date(vaccine.next_due_date) - new Date()) / (1000 * 60 * 60 * 24));
        
        await supabase.rpc('create_notification_from_template', {
          user_id_param: vaccine.dog.owner_id,
          dog_id_param: vaccine.dog_id,
          template_key_param: 'vaccine_due_soon',
          variables_param: {
            dogName: vaccine.dog.name,
            vaccineName: vaccine.vaccine_name,
            days: daysUntil.toString()
          }
        });
      }

      // MEDICINAS PARA HOY
      const today = new Date().toISOString().split('T')[0];
      const { data: todayMedicines } = await supabase
        .from('medicines')
        .select(`
          *,
          dog:dogs(name, owner_id)
        `)
        .eq('next_dose_date', today)
        .eq('is_ongoing', true);

      for (const medicine of todayMedicines) {
        await supabase.rpc('create_notification_from_template', {
          user_id_param: medicine.dog.owner_id,
          dog_id_param: medicine.dog_id,
          template_key_param: 'medicine_reminder',
          variables_param: {
            dogName: medicine.dog.name,
            medicineName: medicine.medicine_name,
            dosage: medicine.dosage
          }
        });
      }

      console.log(`‚úÖ Recordatorios m√©dicos enviados: ${upcomingVaccines.length} vacunas, ${todayMedicines.length} medicinas`);
    } catch (error) {
      console.error('‚ùå Error en recordatorios m√©dicos:', error);
    }
  }

  // ============================================
  // ‚è∞ RUTINAS Y HORARIOS
  // ============================================
  
  static async scheduleRoutineReminders(dogId, routineType, time) {
    console.log(`‚è∞ Programando recordatorios de rutina para ${routineType}...`);
    
    try {
      // Obtener informaci√≥n del perro
      const { data: dog } = await supabase
        .from('dogs')
        .select('name, owner_id')
        .eq('id', dogId)
        .single();

      // Calcular pr√≥xima hora de la rutina
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      const [hours, minutes] = time.split(':');
      tomorrow.setHours(parseInt(hours), parseInt(minutes), 0, 0);

      // Determinar template y variables seg√∫n tipo de rutina
      let templateKey = 'routine_reminder';
      let variables = {
        dogName: dog.name,
        routineName: routineType,
        notes: ''
      };

      if (routineType === 'paseo' || routineType === 'ejercicio') {
        templateKey = 'walk_reminder';
        variables = {
          dogName: dog.name,
          duration: '20'
        };
      }

      // Programar notificaci√≥n recurrente
      await supabase.from('scheduled_notifications').insert({
        user_id: dog.owner_id,
        dog_id: dogId,
        template_key: templateKey,
        variables: variables,
        scheduled_for: tomorrow.toISOString(),
        is_recurring: true,
        recurrence_rule: 'FREQ=DAILY;BYHOUR=' + hours,
        status: 'pending'
      });

      console.log(`‚úÖ Rutina programada: ${routineType} a las ${time} para ${dog.name}`);
    } catch (error) {
      console.error('‚ùå Error programando rutina:', error);
    }
  }

  // ============================================
  // üìä TIPS EDUCATIVOS SEMANALES
  // ============================================
  
  static async scheduleWeeklyTips(userId) {
    const tips = [
      'La consistencia es clave en el entrenamiento canino. Practica comandos b√°sicos 5 minutos al d√≠a.',
      'Los perros aprenden mejor con sesiones cortas de 5-10 minutos que con sesiones largas.',
      'Recompensar inmediatamente despu√©s del comportamiento deseado mejora el aprendizaje.',
      'El ejercicio mental es tan importante como el f√≠sico. Prueba juegos de olfato.',
      'Los perros necesitan rutina para sentirse seguros y felices.',
      'La socializaci√≥n temprana previene problemas de comportamiento en el futuro.',
      'Los comandos b√°sicos (sit, stay, come) pueden salvar la vida de tu perro.'
    ];

    try {
      // Programar tip para el pr√≥ximo lunes
      const nextMonday = new Date();
      const daysUntilMonday = (1 + 7 - nextMonday.getDay()) % 7 || 7;
      nextMonday.setDate(nextMonday.getDate() + daysUntilMonday);
      nextMonday.setHours(9, 0, 0, 0);

      const randomTip = tips[Math.floor(Math.random() * tips.length)];

      await supabase.from('scheduled_notifications').insert({
        user_id: userId,
        template_key: 'weekly_tip',
        variables: { tip: randomTip },
        scheduled_for: nextMonday.toISOString(),
        is_recurring: true,
        recurrence_rule: 'FREQ=WEEKLY;BYDAY=MO',
        status: 'pending'
      });

      console.log('‚úÖ Tip semanal programado para', nextMonday.toLocaleDateString());
    } catch (error) {
      console.error('‚ùå Error programando tip semanal:', error);
    }
  }
}

// ============================================
// üîß FUNCIONES DE UTILIDAD
// ============================================

export const createTestNotification = async (userId, dogId, type = 'transport') => {
  const templates = {
    transport: {
      template_key: 'transport_started',
      variables: { dogName: 'Max', eta: '25' }
    },
    behavior: {
      template_key: 'behavior_alert', 
      variables: { dogName: 'Max', behavior: 'ansiedad alta', recommendation: 'ejercicios de relajaci√≥n' }
    },
    medical: {
      template_key: 'vaccine_due_soon',
      variables: { dogName: 'Max', vaccineName: 'Rabia', days: '3' }
    },
    improvement: {
      template_key: 'behavior_improvement',
      variables: { dogName: 'Max', area: 'obediencia', details: '¬°Ha mejorado mucho!' }
    }
  };

  const config = templates[type];
  
  try {
    const { data, error } = await supabase.rpc('create_notification_from_template', {
      user_id_param: userId,
      dog_id_param: dogId,
      template_key_param: config.template_key,
      variables_param: config.variables
    });

    if (error) throw error;
    console.log(`‚úÖ Notificaci√≥n de prueba creada: ${config.template_key}`);
    return data;
  } catch (error) {
    console.error('‚ùå Error creando notificaci√≥n de prueba:', error);
    throw error;
  }
};